/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tensa.wbfopt;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.image.IndexColorModel;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import org.tensa.wbfopt.bean.MatVector;
import org.tensa.wbfopt.bean.SimpleWspace;

/**
 *
 * @author Marcelo
 */
public class Wbfopt extends javax.swing.JFrame {

    private SimpleWspace wfwsp;
    private String material;
    private List<List<MatVector>> matVector;
    private BufferedImage outputImage;
    private List<Rectangle2D.Double> rectangleList;

    /**
     * Creates new form Wbfopt
     */
    public Wbfopt() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jLabel1 = getNewInputLabel();
        jLabel2 = getNewOutputLabel();

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Limpia textura");

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setText("Cargar");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed1(evt);
            }
        });
        jToolBar1.add(jButton1);

        jComboBox1.setModel(getComboBoxModel());
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jComboBox1);

        jButton3.setText("Convertir");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jButton2.setText("Salvar");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        jSplitPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("input");
        jSplitPane1.setLeftComponent(jLabel1);

        jLabel2.setText("output");
        jSplitPane1.setRightComponent(jLabel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jSplitPane1))
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed1
        try {
            jFileChooser1.showOpenDialog(null);
        } catch (java.awt.HeadlessException e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed1

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        
        if (evt.paramString().contains("ApproveSelection")) {
            File selectedFile = jFileChooser1.getSelectedFile();
            try {
                wfwsp = SimpleWspace.read(selectedFile);
                wfwsp.processVectors();
                material = wfwsp.getMatFaces().keySet().stream().findFirst().get();
                wfwsp.readImage(material);
                matVector = wfwsp.getMatFaces().get(material);
                jLabel1.repaint();
                outputImage = createCompatibleDestImage(wfwsp.getMtlImage(), null);
                jComboBox1.setModel(getComboBoxModel());
                jComboBox1.setSelectedItem(material);
                

            } catch (FileNotFoundException ex) {
                Logger.getLogger(Wbfopt.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Wbfopt.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
        try {
            material = (String)jComboBox1.getSelectedItem();
            wfwsp.readImage(material);
            matVector = wfwsp.getMatFaces().get(material);
            jLabel1.repaint();
            outputImage = createCompatibleDestImage(wfwsp.getMtlImage(), null);
        } catch (IOException ex) {
            Logger.getLogger(Wbfopt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        rectangleList = matVector.stream()
                .map(l -> {
                    Rectangle2D.Double r = new Rectangle.Double();
                    DoubleSummaryStatistics summaryX = l.stream()
                            .mapToDouble(MatVector::getX)
                            .summaryStatistics();
                    DoubleSummaryStatistics summaryY = l.stream()
                            .mapToDouble(MatVector::getY)
                            .summaryStatistics();
                    r.x = summaryX.getMin() * outputImage.getWidth();
                    r.y = (1-summaryY.getMin()) * outputImage.getWidth();
                    r.width = (summaryX.getMax() - summaryX.getMin()) * outputImage.getWidth();
                    r.height = (summaryY.getMax() - summaryY.getMin() ) * outputImage.getWidth();
                    return r;
                })
                .collect(Collectors.toList());
        jLabel2.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Wbfopt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Wbfopt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Wbfopt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Wbfopt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Wbfopt().setVisible(true);
            }
        });
    }

    public javax.swing.JLabel getNewInputLabel() {
        return new javax.swing.JLabel() {
            @Override
            protected void paintComponent(Graphics g) {

                if (Objects.nonNull(wfwsp)) {
                    Graphics2D localg = (Graphics2D) g;
                    float escala = (float) jLabel1.getBounds().width / (float) wfwsp.getMtlImage().getWidth();

                    AffineTransform xforM = AffineTransform.getScaleInstance(escala, escala);
                    AffineTransformOp rop = new AffineTransformOp(xforM, AffineTransformOp.TYPE_BILINEAR);
                    localg.drawImage(wfwsp.getMtlImage(), rop, 0, 0);
                }
            }
        };
    }

    public javax.swing.JLabel getNewOutputLabel() {
        return new javax.swing.JLabel() {
            @Override
            protected void paintComponent(Graphics g) {

                if (Objects.nonNull(outputImage)) {
                    Graphics2D localg = (Graphics2D) g;
                    double escala = (double) jLabel2.getBounds().width / (double) outputImage.getWidth();

                    AffineTransform xforM = AffineTransform.getScaleInstance(escala, escala);
                    AffineTransformOp rop = new AffineTransformOp(xforM, AffineTransformOp.TYPE_BILINEAR);
                    localg.drawImage(outputImage, rop, 0, 0);
                    
                    if (Objects.nonNull(rectangleList)) {
                        localg.setColor(Color.WHITE);
//                        localg.translate(0.0,escala);
                        localg.scale(escala, escala);
//                        localg.getTransform().rotate(Math.PI/4);

                        rectangleList.forEach(r -> {
                            localg.draw(r);
                        });
                       
                    }
                }
            }
        };
    }
    
    public BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM) {
        BufferedImage image;

        int w = src.getWidth();
        int h = src.getHeight();

        WritableRaster wr = null;

        if (destCM == null) {
            destCM = src.getColorModel();
            // Not much support for ICM
            if (destCM instanceof IndexColorModel) {
                destCM = ColorModel.getRGBdefault();
            } else {
                /* Create destination image as similar to the source
                 *  as it possible...
                 */
                wr = src.getData().createCompatibleWritableRaster(w, h);
            }
        }

        if (wr == null) {
            /* This is the case when destination color model
             * was explicitly specified (and it may be not compatible
             * with source raster structure) or source is indexed image.
             * We should use destination color model to create compatible
             * destination raster here.
             */
            wr = destCM.createCompatibleWritableRaster(w, h);
        }

        image = new BufferedImage(destCM, wr,
                destCM.isAlphaPremultiplied(), null);

        return image;
    }
    
    public javax.swing.ComboBoxModel<String> getComboBoxModel() {
        ComboBoxModel<String> model;
        if(Objects.nonNull(wfwsp)) {
            String[] items = wfwsp.getMatFaces().keySet().toArray(String[]::new);
            model = new DefaultComboBoxModel<>(items);

        } else {
            model = new DefaultComboBoxModel<>();
        }
        
        return model;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
